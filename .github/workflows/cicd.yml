name: webMethods MSR CI/CD (VM deployment)

on:
  workflow_dispatch:

jobs:
  install-packages:
    runs-on: msr-vm
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Install packages
      run: |
        for WM_PACKAGE in $(cat packages); do
          /opt/softwareag/wpm/bin/wpm.sh update \
            -u ${{ secrets.GIT_USERNAME }} \
            -p ${{ secrets.GIT_PAT }} \
            -r ${{ vars.GIT_URL }} \
            -d ${{ vars.WM_PATH }} \
            $WM_PACKAGE
        done

    - name: Copy application.properties
      run: |
        cp application.properties ${{ vars.WM_PATH }}/application.properties 

    - name: Restart the MSR
      run: |
        curl -u Administrator:${{ secrets.MSR_ADMIN_PASSWORD }} --location --request POST 'http://localhost:5555/admin/server?action=restart&force=true' || exit 1
        sleep 10

    - name: Wait for MSR to be ready
      run: |
        start_time=$(date +%s)
        timeout=120 # 2 minutes
        echo "Checking http://localhost:5555 for MSR readiness"
        while : ; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5555 | grep -q "200"; then
                echo "MSR is ready"
                exit 0
            else
                current_time=$(date +%s)
                elapsed=$((current_time - start_time))
                echo "MSR not ready yet"
                if [ $elapsed -ge $timeout ]; then
                    echo "Error - 120 seconds timeout reached"
                    exit 1
                fi
            fi
            sleep 5
        done

    - name: Check MSR health
      run: |
        health_json=$(curl -s -u Administrator:${{ secrets.MSR_ADMIN_PASSWORD }} http://localhost:5555/health)
        if [ -z "${health_json}" ]; then
          echo "Empty response to http://localhost:5555/health" && exit 1
        else
          echo "Health status for MSR"
          echo ${health_json}
        fi
        status_checks=$(echo "$health_json" | jq '. | .. | .status? // empty | select(. != "UP")')
        if [[ -n "$status_checks" ]]; then
          echo "Error: One or more resources in MSR are not 'UP'" && exit 1
        fi
        jdbc_state_checks=$(echo "$health_json" | jq '.Adapters.JDBCAdapter.Connections[] | select(.state == "suspended")')
        if [[ -n "$jdbc_state_checks" ]]; then
          echo "Error: One or more JDBC Adapter connections in MSR are suspended"
          exit 1
        fi
